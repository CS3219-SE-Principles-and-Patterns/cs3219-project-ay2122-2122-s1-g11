# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Question Service CI/CD Workflow

on:
    push:
        paths:
        - 'backend/questionService/**'
        - '.github/workflows/questionService.yml'

jobs:
    build:
        runs-on: ubuntu-latest

        # Service containers to run
        services:
            # Label used to access the service container
            postgres:
                # Docker Hub image
                image: postgres
                # Provide the password for postgres
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_USER: postgres
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432
        env:
            NODE_ENV: test

        strategy:
            matrix:
                node-version: [12.x, 14.x, 16.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        defaults:
            run:
                working-directory: ./backend/questionService

        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"
                  cache-dependency-path: backend/questionService/package-lock.json
            - run: npm ci
            - run: npm run build --if-present
            - run: npm install -g db-migrate
            - run: npm install -g db-migrate-pg
            - run: db-migrate up initialize
            - run: npm test
    deploy: 
        name: Deploy Question Service to AWS ECR
        runs-on: ubuntu-latest

        steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-southeast-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: 852678264376.dkr.ecr.ap-southeast-1.amazonaws.com
            ECR_REPOSITORY: cs3219
            IMAGE_TAG: question-service
          run: |
            # Build a docker container and push it to ECR
            cd backend/questionService
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.${GITHUB_RUN_NUMBER} .
            echo "Pushing image to ECR..."
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.${GITHUB_RUN_NUMBER}
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.${GITHUB_RUN_NUMBER}"

        - name: Deploy to AWS EKS                                                                         
          uses: kodermax/kubectl-aws-eks@master                                                                         
          env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
            ECR_REGISTRY: 852678264376.dkr.ecr.ap-southeast-1.amazonaws.com
            ECR_REPOSITORY: cs3219
            IMAGE_TAG: question-service                                                                                                          
            RELEASE_IMAGE: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.${GITHUB_RUN_NUMBER}
          with:                                                                                                         
            args: set image deployment/question-deployment question=${{ env.RELEASE_IMAGE }} 
